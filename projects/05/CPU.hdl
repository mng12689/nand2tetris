// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=isAInstr);
    Not(in=isAInstr,out=isCInstr);
    Mux16(a=comp,b[0..14]=instruction[0..14], sel=isAInstr, out=addrMux);
    And(a=instruction[5],b=isCInstr,out=loadAR);
    Or(a=isAInstr,b=loadAR,out=loadA);
    ARegister(in=addrMux, load=loadA, out=arOut, out[0..14]=addressM);

    Mux16(a=arOut,b=inM,sel=instruction[12],out=aOrMOut);
    And(a=instruction[4],b=isCInstr,out=loadDR);
    DRegister(in=comp,load=loadDR,out=drOut);
    ALU(x=drOut, y=aOrMOut, zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6], out=comp, out=outM, zr=zr, ng=ng);
    And(a=instruction[3], b=instruction[15],out=writeM);

    Not(in=zr,out=nzr);
    Not(in=ng,out=nng);
    And(a=nzr,b=nng,out=pos);

    Not(in=instruction[2],out=notNg);
    Not(in=ng,out=notNgVal);
    Mux(a=true,b=notNgVal,sel=notNg,out=ngOK);
    Not(in=instruction[1],out=notZr);
    Not(in=zr,out=notZrVal);
    Mux(a=true,b=notZrVal,sel=notZr,out=zrOK);
    Not(in=instruction[0],out=notPos);
    Not(in=pos,out=notPosVal);
    Mux(a=true,b=notPosVal,sel=notPos,out=posOK);

    And(a=ngOK,b=zrOK,out=tmpOK);
    And(a=tmpOK,b=posOK,out=flagsOK);
    And(a=flagsOK,b=isCInstr,out=jmp);
    Not(in=jmp,out=notJmp);
    PC(in=arOut,reset=reset,load=jmp,inc=notJmp,out[0..14]=pc);
}