// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array heap;
    static int free;
    static int tail;
    
    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let free = 2048;
        let tail = 2048;
        let heap[0] = 0;
        let heap[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
         var int curr;
         var int s, newSize;

         let curr = free;
         while ( curr > 0 ) {
               let s = heap[curr+1];
               if ( ~((s + 2) < size) ) {
                 let newSize = s - (size + 2);
                 let heap[curr+1] = newSize;
                 return ( curr + 2 + newSize ) +2;
               }
               let curr = heap[curr];
         }
         return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
       let heap[tail] = o - 2;
       let tail = o - 2;
       return;
    }    
}
