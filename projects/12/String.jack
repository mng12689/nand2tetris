// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int length;
    
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      let str = Array.new(maxLength);
      let length = 0;
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      do Memory.deAlloc(this);
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      let str[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      let str[length] = c;
      let length = length + 1;
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      let length = length - 1;
      return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
      var int i, val, digit;
      let i = 0;
      let val = 0;
      while ( i < length ) {
        let digit = str[i];
        let val = String.toInt(digit) + (10 * i);
        let i = i + 1;
      }
      return val;
    }

    function int toInt(int d) {
      return d - 48;
    }
    
    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      let length = 0;
      if ( val < 0 ) {
        let val = -val;
        do appendChar(45);
      }
      do _setInt(val);
      return;
    }

    method void _setInt(int val) {
      var int digit, c;

      let digit = (val - ((val/10) * 10)); // mod
      let c = String.toChar(digit);

      if ( val < 10 ) {
        do appendChar(c);
      }
      do appendChar(setInt(val/10));
      return;
    }

    function char toChar(int val) {
     return 48 + val;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 10;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 8;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
