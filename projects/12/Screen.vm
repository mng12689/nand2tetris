function Screen.init 0
push constant 0
pop static 0
push constant 16384
pop static 1
push constant 0
return
function Screen.clearScreen 2
push constant 0
pop local 0
push static 1
pop local 1
label WHILE_EXP0
push local 0
push constant 256
lt
push constant 512
call Math.multiply 2
not
if-goto WHILE_END0
push local 1
push static 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 16
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.mod 0
push argument 0
push argument 0
push argument 1
call Math.divide 2
push argument 1
call Math.multiply 2
sub
return
function Screen.pow 0
push argument 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
return
label IF_FALSE0
push argument 1
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
return
label IF_FALSE1
label WHILE_EXP0
push argument 1
push constant 1
gt
not
if-goto WHILE_END0
push argument 0
push argument 0
call Math.multiply 2
pop argument 0
push argument 1
push constant 1
sub
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push argument 0
return
function Screen.drawPixel 3
push constant 512
push constant 16
call Math.divide 2
push argument 1
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push argument 0
push constant 16
call Screen.mod 2
pop local 1
push static 0
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop local 2
goto IF_END0
label IF_FALSE0
push constant 2
push local 1
call Screen.pow 2
pop local 2
label IF_END0
push local 0
push static 1
add
push local 0
push static 1
add
pop pointer 1
push that 0
push local 2
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Screen.drawLine 17
push argument 1
push argument 3
eq
push argument 0
and
push argument 2
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push constant 0
return
label IF_FALSE0
push argument 1
push argument 3
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
push argument 2
call Math.min 2
pop local 0
push argument 0
push argument 2
call Math.max 2
pop local 1
push local 0
push constant 16
call Math.divide 2
push local 0
push constant 16
call Screen.mod 2
add
pop local 2
push local 1
push local 0
sub
push constant 16
call Math.divide 2
pop local 3
push local 1
push local 0
sub
push constant 16
call Screen.mod 2
pop local 4
push constant 2
push local 4
push constant 1
add
call Screen.pow 2
push constant 1
sub
push constant 2
push constant 16
push local 4
sub
call Screen.pow 2
call Math.multiply 2
pop local 5
push local 2
pop local 6
label WHILE_EXP0
push local 3
push constant 0
gt
not
if-goto WHILE_END0
push local 6
push static 1
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 6
push constant 16
add
pop local 6
goto WHILE_EXP0
label WHILE_END0
push local 6
push static 1
add
push local 6
push static 1
add
pop pointer 1
push that 0
push local 5
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
label IF_FALSE1
push argument 0
push argument 2
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 1
push argument 3
call Math.min 2
pop local 7
push argument 1
push argument 3
call Math.max 2
pop local 8
push local 7
pop local 9
label WHILE_EXP1
push local 9
push local 8
lt
push constant 1
add
not
if-goto WHILE_END1
push argument 0
push local 9
call Screen.drawPixel 2
pop temp 0
push local 9
push constant 1
add
pop local 9
goto WHILE_EXP1
label WHILE_END1
push constant 0
return
label IF_FALSE2
push argument 2
push argument 0
sub
pop local 12
push argument 3
push argument 1
sub
pop local 13
push argument 2
push argument 0
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 1
pop local 15
goto IF_END3
label IF_FALSE3
push constant 1
neg
pop local 15
label IF_END3
push argument 3
push argument 1
gt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 1
pop local 16
goto IF_END4
label IF_FALSE4
push constant 1
neg
pop local 16
label IF_END4
push constant 0
pop local 10
push constant 0
pop local 11
push constant 0
pop local 14
label WHILE_EXP2
push local 10
push local 12
lt
push local 11
and
push local 13
lt
not
if-goto WHILE_END2
push argument 0
push local 10
push local 15
call Math.multiply 2
add
push argument 1
push local 11
push local 16
call Math.multiply 2
add
call Screen.drawPixel 2
pop temp 0
push local 14
push constant 0
lt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 10
push constant 1
add
pop local 10
push local 14
push local 13
add
pop local 14
goto IF_END5
label IF_FALSE5
push local 11
push constant 1
add
pop local 11
push local 14
push local 12
sub
pop local 14
label IF_END5
goto WHILE_EXP2
label WHILE_END2
push constant 0
return
function Screen.drawRectangle 0
label WHILE_EXP0
push argument 1
push argument 3
lt
push constant 1
add
not
if-goto WHILE_END0
push argument 0
push argument 1
push argument 2
push argument 1
call Screen.drawLine 4
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 3
push argument 2
neg
pop local 0
label WHILE_EXP0
push local 0
push argument 2
lt
push constant 1
add
not
if-goto WHILE_END0
push argument 1
push argument 2
call Math.abs 1
sub
pop local 1
push argument 2
push argument 2
call Math.multiply 2
push local 1
push local 1
call Math.multiply 2
sub
call Math.sqrt 1
pop local 2
push argument 0
push local 2
sub
push local 0
push argument 0
push local 2
add
push local 0
call Screen.drawLine 4
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
